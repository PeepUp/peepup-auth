generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  id            String    @id @default(uuid())
  avatar        String    @default("")
  email         String    @unique
  emailVerified DateTime?
  firstName     String    @default("")
  lastName      String    @default("")
  password      String
  phoneNumber   String?   @unique
  state         String    @default("active")
  username      String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation fields
  whitelistedTokens WhitelistedToken[]
  roles             Role[]

  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id])
  Token      Token[]

  @@unique([email, username, phoneNumber])
  @@map(name: "identities")
}

model Role {
  id   Int           @id @default(autoincrement())
  type UserRoleTypes @default(volunteer)

  // relation fields
  identityId String?      @unique
  identity   Identity?    @relation(fields: [identityId], references: [id])
  Permission Permission[]
}

model Permission {
  id         String   @id @default(cuid())
  action     Action
  subject    String
  fields     String[]
  conditions Json?
  inverted   Boolean? @default(false)
  reason     String?

  // relation fields
  roleId    Int?
  role      Role?       @relation(fields: [roleId], references: [id])
  Attribute Attribute[]

  @@map(name: "permissions")
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation fields
  permissionId String?
  permission   Permission? @relation(fields: [permissionId], references: [id])

  @@map("attributes")
}

model Provider {
  id                  Int       @id @default(autoincrement())
  name                String
  userProviderId      String
  type                String
  slug                String
  tokenUrl            String
  authUrl             String
  clientId            String
  clientSecret        String
  scope               String
  callbackUrl         String
  state               String
  nonce               String
  params              String
  version             String
  accessToken         String
  accessTokenExpires  DateTime?
  refreshToken        String
  refreshTokenExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // relation fields
  identities Identity[]

  @@map(name: "provider")
}

model Token {
  jti            String           @id
  value          String           @unique
  tokenTypes     TokenTypes
  header         Json
  payload        Json
  kid            String
  nbf            Int
  expires_at     Int
  tokenStatus    TokenStatusTypes
  expirationTime DateTime

  createdAt DateTime @default(now())

  // relation fields
  identityId String?
  identity   Identity? @relation(fields: [identityId], references: [id])

  WhitelistedToken WhitelistedToken[]

  @@index([value], name: "tokenValueIndex")
  @@index([jti], name: "tokenJtiIndex")
  @@index([identityId], name: "tokenIdentityIdIndex")
  @@map(name: "tokens")
}

model WhitelistedToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relation fields
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [jti])

  identityId String?
  identity   Identity? @relation(fields: [identityId], references: [id])

  @@unique([tokenId, identityId])
  @@index([identityId], name: "whitelistedTokenIdentityIdIndex")
  @@map(name: "tokens_whitelisted")
}

enum UserRoleTypes {
  admin
  volunteer
  organization
}

enum TokenTypes {
  access
  refresh
}

enum TokenStatusTypes {
  revoked
  signed
  expired
  revokedAndExpired
  error
  active
  queued
  unknown
  rotated
}

enum Action {
  Manage
  Create
  Update
  Read
  Delete
}
