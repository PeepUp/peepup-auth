generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  id            String             @id @default(uuid())
  avatar        String             @default("")
  email         String             @unique
  emailVerified DateTime?
  firstName     String             @default("")
  lastName      String             @default("")
  password      String
  phoneNumber   String?            
  state         IdentityStateTypes @default(active)
  username      String?            @unique
  role          SystemRole         @default(member)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  whitelistedTokens WhitelistedToken[]
  socialMediaLinks SocialMediaLink[]

  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id])
  Token      Token[]

  @@unique([email, username, phoneNumber])
  @@map(name: "identities")
}

enum SystemRole {
  // Super-admin. Can do everything in the platform.
  admin

  // Member. Only has access to their own workspaces.
  member

  // volunteer. Only has access to their own workspaces.
  volunteer

  // organization. Only has access to their own workspaces.
  organization

  // manager. Only has access to their own workspaces.
  manager
}

// model Role {
//   id   Int           @id @default(autoincrement())
//   type UserRoleTypes @default(volunteer)
//
//   identityId  String?      @unique
//   identity    Identity?    @relation(fields: [identityId], references: [id])
//   permissions Permission[]
// }

// model Permission {
//   id         String   @id @default(cuid())
//   action     Action
//   subject    String
//   fields     String[]
//   conditions Json?
//   inverted   Boolean? @default(false)
//   reason     String?
//
//   // relation fields
//   roleId Int?
//   role   Role? @relation(fields: [roleId], references: [id])
//
//   @@map(name: "permissions")
// }

// model Attribute {
//   id        Int      @id @default(autoincrement())
//   name      String
//   value     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   @@map("attributes")
// }

model Provider {
  id                  Int       @id @default(autoincrement())
  name                String
  userProviderId      String
  type                String
  slug                String
  tokenUrl            String
  authUrl             String
  clientId            String
  clientSecret        String
  scope               String
  callbackUrl         String
  state               String
  nonce               String
  params              String
  version             String
  accessToken         String
  accessTokenExpires  DateTime?
  refreshToken        String
  refreshTokenExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // relation fields
  identities Identity[]

  @@map(name: "provider")
}

model Token {
  jti            String           @id
  value          String           @unique
  type           TokenTypes
  header         Json
  payload        Json
  kid            String
  nbf            Int
  expires_at     Int
  tokenStatus    TokenStatusTypes
  expirationTime DateTime
  ip_address     String?          @default("")
  device_id      String?          @default("")

  createdAt DateTime @default(now())

  // relation fields
  identityId String?
  identity   Identity? @relation(fields: [identityId], references: [id])

  WhitelistedToken WhitelistedToken[]

  @@index([value], name: "tokenValueIndex")
  @@index([jti], name: "tokenJtiIndex")
  @@index([identityId], name: "tokenIdentityIdIndex")
  @@map(name: "tokens")
}

model WhitelistedToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // relation fields
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [jti])

  identityId String?
  identity   Identity? @relation(fields: [identityId], references: [id])

  @@unique([tokenId, identityId])
  @@index([identityId], name: "whitelistedTokenIdentityIdIndex")
  @@map(name: "tokens_whitelisted")
}

model SocialMediaLink {
  id        Int      @id @default(autoincrement())
  type      SocialMediaType
  url       String
  identity  Identity @relation(fields: [identityId], references: [id])
  identityId String

  @@map(name: "social_media_links")
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

enum IdentityStateTypes {
  active
  deactive
  pending
  blocked
  deleted
  archived
  unknown
  unverified
}

enum TokenTypes {
  access
  refresh
}

enum TokenStatusTypes {
  revoked
  signed
  expired
  revokedAndExpired
  error
  active
  queued
  unknown
  rotated
}

enum Action {
  manage
  create
  update
  read
  delete
}

enum SocialMediaType {
  threads
  instagram
  linkedin
  facebook
  github
  twitter
}
