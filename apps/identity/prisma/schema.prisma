generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     String?

  // relation fields
  tokens Token[]
  user   User?
  roles  Role[]

  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id])

  @@map(name: "accounts")
}

model Role {
  id          Int          @id @default(autoincrement())
  type        UserRoleEnum @default(volunteer)
  permissions Permission[]

  // relation fields
  userId String?  @unique
  user   Account? @relation(fields: [userId], references: [id])
}

model Permission {
  id       Int     @id @default(autoincrement())
  action   String?
  resource String?

  // relation fields
  attributes Attribute[]

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id])

  @@map(name: "permissions")
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation fields
  permissionId Int?
  permission   Permission? @relation(fields: [permissionId], references: [id])

  @@map("attributes")
}

model User {
  id            String    @id @default(uuid())
  firstName     String?
  lastName      String?
  emailVerified DateTime?
  avatar        String?
  username      String?   @unique
  email         String    @unique
  password      String
  phone         String?   @unique

  // relation fields
  accountId String?  @unique
  account   Account? @relation(fields: [accountId], references: [id])

  provider Provider[]
  tokens   Token[]

  @@map(name: "users")
}

model Provider {
  id                  Int       @id @default(autoincrement())
  name                String
  userProviderId      String
  type                String
  slug                String
  tokenUrl            String
  authUrl             String
  clientId            String
  clientSecret        String
  scope               String
  callbackUrl         String
  state               String
  nonce               String
  params              String
  version             String
  accessToken         String
  accessTokenExpires  DateTime?
  refreshToken        String
  refreshTokenExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // relation fields
  account Account[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map(name: "provider")
}

model Token {
  id                        Int       @id @default(autoincrement())
  expires_at                DateTime?
  access_token              String
  refresh_token             String
  blacklisted_access_token  String
  blacklisted_refresh_token String

  // relation fields
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])

  @@index([accountId], name: "accountId")
  @@map(name: "tokens")
}

enum UserRoleEnum {
  admin
  volunteer
  organization
}
